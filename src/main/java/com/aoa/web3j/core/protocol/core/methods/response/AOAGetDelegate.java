package com.aoa.web3j.core.protocol.core.methods.response;import com.aoa.web3j.core.protocol.ObjectMapperFactory;import com.fasterxml.jackson.core.JsonParser;import com.fasterxml.jackson.core.JsonToken;import com.fasterxml.jackson.databind.DeserializationContext;import com.fasterxml.jackson.databind.JsonDeserializer;import com.fasterxml.jackson.databind.ObjectReader;import com.aoa.web3j.core.protocol.core.Response;import java.io.IOException;import java.util.Objects;import java.util.Optional;public class AOAGetDelegate extends Response<AOAGetDelegate.Delegate> {    public Optional<Delegate> getDelegate() {        return Optional.ofNullable(getResult());    }    public static class Delegate {        private String address;        private int vote;        private String nickName;        private int registerTime;        public Delegate() {        }        public Delegate(String address, int vote, String nickName, int registerTime) {            this.address = address;            this.vote = vote;            this.nickName = nickName;            this.registerTime = registerTime;        }        public String getAddress() {            return address;        }        public void setAddress(String address) {            this.address = address;        }        public int getVote() {            return vote;        }        public void setVote(int vote) {            this.vote = vote;        }        public String getNickName() {            return nickName;        }        public void setNickName(String nickName) {            this.nickName = nickName;        }        public int getRegisterTime() {            return registerTime;        }        public void setRegisterTime(int registerTime) {            this.registerTime = registerTime;        }        @Override        public boolean equals(Object o) {            if (this == o) {                return true;            }            if (o == null || getClass() != o.getClass()) {                return false;            }            Delegate delegate = (Delegate) o;            return vote == delegate.vote &&                   registerTime == delegate.registerTime &&                   Objects.equals(address, delegate.address) &&                   Objects.equals(nickName, delegate.nickName);        }        @Override        public int hashCode() {            return Objects.hash(address, vote, nickName, registerTime);        }        @Override        public String toString() {            return "{" +                   "address='" + address + '\'' +                   ", vote=" + vote +                   ", nickName='" + nickName + '\'' +                   ", registerTime=" + registerTime +                   '}';        }    }    public static class ResponseDeserialiser extends JsonDeserializer<Delegate> {        private ObjectReader objectReader = ObjectMapperFactory.getObjectReader();        @Override        public Delegate deserialize(            JsonParser jsonParser,            DeserializationContext deserializationContext) throws IOException {            if (jsonParser.getCurrentToken() != JsonToken.VALUE_NULL) {                return objectReader.readValue(jsonParser, Delegate.class);            } else {                return null;  // null is wrapped by Optional in above getter            }        }    }}